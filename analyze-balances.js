#!/usr/bin/env node

/**
 * Balance Analysis Script
 * 
 * This script helps analyze the stablecoin balance data generated by the squid.
 * It provides various queries and aggregations to understand the data.
 * 
 * NOTE: For very large datasets, consider streaming the data instead of loading
 * everything into memory at once.
 */

const fs = require('fs');
const path = require('path');

// Configuration
const DATA_DIR = './data';
const MIN_BALANCE_USD = 1;

/**
 * Read all TSV files from a directory recursively
 */
function readTSVFiles(dir, filename) {
    const files = [];
    
    function scanDirectory(currentDir) {
        const items = fs.readdirSync(currentDir);
        
        for (const item of items) {
            const fullPath = path.join(currentDir, item);
            const stat = fs.statSync(fullPath);
            
            if (stat.isDirectory()) {
                scanDirectory(fullPath);
            } else if (item === filename) {
                files.push(fullPath);
            }
        }
    }
    
    scanDirectory(dir);
    return files;
}

/**
 * Parse TSV file and return array of objects
 */
function parseTSV(filePath) {
    const content = fs.readFileSync(filePath, 'utf8');
    const lines = content.trim().split('\n');
    
    if (lines.length < 2) return [];
    
    const headers = lines[0].split('\t');
    const data = [];
    
    for (let i = 1; i < lines.length; i++) {
        const values = lines[i].split('\t');
        const row = {};
        
        headers.forEach((header, index) => {
            row[header] = values[index];
        });
        
        data.push(row);
    }
    
    return data;
}

/**
 * Get top holders by total balance
 */
function getTopHolders(limit = 10) {
    console.log(`\nüèÜ Top ${limit} Holders by Total Balance:`);
    console.log('=' .repeat(80));
    
    const summaryFiles = readTSVFiles(DATA_DIR, 'summary.tsv');
    const allData = [];
    
    for (const file of summaryFiles) {
        const data = parseTSV(file);
        allData.push(...data);
    }
    
    // Sort by total balance (descending)
    allData.sort((a, b) => parseFloat(b.total_balance_usd) - parseFloat(a.total_balance_usd));
    
    console.log('Rank | Address                                    | Total Balance (USD) | Token Count');
    console.log('-'.repeat(80));
    
    allData.slice(0, limit).forEach((row, index) => {
        const rank = (index + 1).toString().padStart(4);
        const address = row.address.padEnd(42);
        const balance = parseFloat(row.total_balance_usd).toFixed(2).padStart(18);
        const tokenCount = row.token_count.padStart(11);
        
        console.log(`${rank} | ${address} | ${balance} | ${tokenCount}`);
    });
}

/**
 * Get top holders for a specific token
 */
function getTopTokenHolders(token, limit = 10) {
    console.log(`\nüí∞ Top ${limit} ${token} Holders:`);
    console.log('=' .repeat(80));
    
    const balanceFiles = readTSVFiles(DATA_DIR, 'balances.tsv');
    const allData = [];
    
    for (const file of balanceFiles) {
        const data = parseTSV(file);
        const tokenData = data.filter(row => row.token === token);
        allData.push(...tokenData);
    }
    
    // Sort by balance (descending)
    allData.sort((a, b) => parseFloat(b.balance_usd) - parseFloat(a.balance_usd));
    
    console.log('Rank | Address                                    | Balance (USD) | Raw Balance');
    console.log('-'.repeat(80));
    
    allData.slice(0, limit).forEach((row, index) => {
        const rank = (index + 1).toString().padStart(4);
        const address = row.address.padEnd(42);
        const balanceUSD = parseFloat(row.balance_usd).toFixed(2).padStart(14);
        const rawBalance = row.balance.padStart(12);
        
        console.log(`${rank} | ${address} | ${balanceUSD} | ${rawBalance}`);
    });
}

/**
 * Get statistics about the data
 */
function getStatistics() {
    console.log('\nüìä Data Statistics:');
    console.log('=' .repeat(80));
    
    const summaryFiles = readTSVFiles(DATA_DIR, 'summary.tsv');
    const balanceFiles = readTSVFiles(DATA_DIR, 'balances.tsv');
    const transferFiles = readTSVFiles(DATA_DIR, 'transfers.tsv');
    
    let totalAddresses = 0;
    let totalBalanceUSD = 0;
    let totalTransfers = 0;
    const tokenCounts = {};
    
    // Process summary data
    for (const file of summaryFiles) {
        const data = parseTSV(file);
        totalAddresses += data.length;
        
        for (const row of data) {
            totalBalanceUSD += parseFloat(row.total_balance_usd);
        }
    }
    
    // Process balance data for token counts
    for (const file of balanceFiles) {
        const data = parseTSV(file);
        for (const row of data) {
            const token = row.token;
            tokenCounts[token] = (tokenCounts[token] || 0) + 1;
        }
    }
    
    // Process transfer data
    for (const file of transferFiles) {
        const data = parseTSV(file);
        totalTransfers += data.length;
    }
    
    console.log(`Total Addresses with Balance ‚â• $${MIN_BALANCE_USD}: ${totalAddresses.toLocaleString()}`);
    console.log(`Total Balance Value: $${totalBalanceUSD.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`);
    console.log(`Total Transfers Processed: ${totalTransfers.toLocaleString()}`);
    console.log('\nToken Distribution:');
    
    Object.entries(tokenCounts)
        .sort(([,a], [,b]) => b - a)
        .forEach(([token, count]) => {
            console.log(`  ${token}: ${count.toLocaleString()} addresses`);
        });
}

/**
 * Find addresses holding multiple stablecoins
 */
function getMultiTokenHolders(minTokens = 3, limit = 10) {
    console.log(`\nü™ô Addresses Holding ${minTokens}+ Different Stablecoins:`);
    console.log('=' .repeat(80));
    
    const summaryFiles = readTSVFiles(DATA_DIR, 'summary.tsv');
    const allData = [];
    
    for (const file of summaryFiles) {
        const data = parseTSV(file);
        const multiTokenData = data.filter(row => parseInt(row.token_count) >= minTokens);
        allData.push(...multiTokenData);
    }
    
    // Sort by total balance (descending)
    allData.sort((a, b) => parseFloat(b.total_balance_usd) - parseFloat(a.total_balance_usd));
    
    console.log('Rank | Address                                    | Total Balance (USD) | Token Count');
    console.log('-'.repeat(80));
    
    allData.slice(0, limit).forEach((row, index) => {
        const rank = (index + 1).toString().padStart(4);
        const address = row.address.padEnd(42);
        const balance = parseFloat(row.total_balance_usd).toFixed(2).padStart(18);
        const tokenCount = row.token_count.padStart(11);
        
        console.log(`${rank} | ${address} | ${balance} | ${tokenCount}`);
    });
}

/**
 * Main function
 */
function main() {
    const args = process.argv.slice(2);
    const command = args[0] || 'help';
    
    console.log('üîç Stablecoin Balance Analyzer');
    console.log('=' .repeat(80));
    
    switch (command) {
        case 'top':
            const limit = parseInt(args[1]) || 10;
            getTopHolders(limit);
            break;
            
        case 'token':
            const token = args[1] || 'USDC';
            const tokenLimit = parseInt(args[2]) || 10;
            getTopTokenHolders(token, tokenLimit);
            break;
            
        case 'stats':
            getStatistics();
            break;
            
        case 'multi':
            const minTokens = parseInt(args[1]) || 3;
            const multiLimit = parseInt(args[2]) || 10;
            getMultiTokenHolders(minTokens, multiLimit);
            break;
            
        case 'help':
        default:
            console.log(`
Usage: node analyze-balances.js <command> [options]

Commands:
  top [limit]           Show top holders by total balance (default: 10)
  token <token> [limit] Show top holders for specific token (default: USDC, 10)
  stats                 Show overall statistics
  multi [min] [limit]   Show addresses holding multiple tokens (default: 3, 10)
  help                  Show this help message

Examples:
  node analyze-balances.js top 20
  node analyze-balances.js token USDT 15
  node analyze-balances.js multi 5 20
  node analyze-balances.js stats
            `);
            break;
    }
}

// Run the script
if (require.main === module) {
    main();
}

module.exports = {
    getTopHolders,
    getTopTokenHolders,
    getStatistics,
    getMultiTokenHolders
}; 